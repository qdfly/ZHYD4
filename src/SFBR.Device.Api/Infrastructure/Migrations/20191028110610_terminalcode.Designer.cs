// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFBR.Device.Infrastructure;

namespace SFBR.Device.Infrastructure.Migrations
{
    [DbContext(typeof(DeviceContext))]
    [Migration("20191028110610_terminalcode")]
    partial class terminalcode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.BrandAggregate.Brand", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Description");

                    b.Property<string>("GroupKey")
                        .HasMaxLength(50);

                    b.Property<string>("TentantId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = "d53c7ef7-892c-4aa4-9291-1543f0b1a2cd",
                            BrandName = "海康",
                            CreationTime = new DateTime(2019, 10, 28, 11, 6, 9, 851, DateTimeKind.Utc).AddTicks(8023)
                        },
                        new
                        {
                            Id = "898bc149-63e1-4a68-a58b-d3a2a761fdba",
                            BrandName = "大华",
                            CreationTime = new DateTime(2019, 10, 28, 11, 6, 9, 852, DateTimeKind.Utc).AddTicks(467)
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Channel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<bool?>("OutputThreePhase");

                    b.Property<int?>("OutputType");

                    b.Property<double?>("OutputValue");

                    b.Property<string>("PortDefaultName")
                        .HasMaxLength(50);

                    b.Property<int>("PortNumber");

                    b.Property<int>("PortType");

                    b.Property<string>("Sort")
                        .HasMaxLength(50);

                    b.Property<string>("TerminalId");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Controller", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Buttons")
                        .HasMaxLength(350);

                    b.Property<string>("ControllerCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ControllerStatus")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("Enabled");

                    b.Property<int?>("PortNumber");

                    b.Property<string>("TerminalId");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("Controllers");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("BrandId")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyId")
                        .HasMaxLength(50);

                    b.Property<int>("Connection");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Description");

                    b.Property<string>("DeviceIP")
                        .HasMaxLength(50);

                    b.Property<string>("DeviceName")
                        .HasMaxLength(50);

                    b.Property<int>("DevicePort");

                    b.Property<string>("DeviceTypeCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<string>("EquipNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("InstallTime");

                    b.Property<bool?>("IsMaster");

                    b.Property<string>("ModelCode")
                        .HasMaxLength(50);

                    b.Property<string>("OprationId")
                        .HasMaxLength(50);

                    b.Property<string>("ParentId")
                        .HasMaxLength(50);

                    b.Property<string>("ServerIP")
                        .HasMaxLength(50);

                    b.Property<int>("ServerPort");

                    b.Property<string>("TentantId")
                        .HasMaxLength(50);

                    b.Property<double>("Warranty");

                    b.HasKey("Id");

                    b.ToTable("Devices");

                    b.HasDiscriminator<string>("DeviceTypeCode").HasValue("Device");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DeviceAlarm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("AlarmCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("AlarmTime");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("Enabled");

                    b.Property<string>("NormalValue")
                        .HasMaxLength(50);

                    b.Property<double?>("RepairTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TargetCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TerminalId");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("DeviceAlarms");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DeviceFunction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("CallbackCodes")
                        .HasMaxLength(150);

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("Enabled");

                    b.Property<string>("FunctionCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockSetting");

                    b.Property<int?>("PortNumber");

                    b.Property<string>("Setting");

                    b.Property<string>("SettingTypeName")
                        .HasMaxLength(2000);

                    b.Property<string>("Sort")
                        .HasMaxLength(10);

                    b.Property<string>("TerminalId");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("DeviceFunctions");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DevicePower", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AlarmBlackList");

                    b.Property<bool?>("Alarmed_CallPhone");

                    b.Property<bool?>("Alarmed_SendEmail");

                    b.Property<bool?>("Alarmed_SendSMS");

                    b.Property<bool?>("CallPhone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FunctionBlackList");

                    b.Property<bool?>("SendEmail");

                    b.Property<bool?>("SendSMS");

                    b.HasKey("Id");

                    b.ToTable("DevicePowers");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DeviceProp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("CameraId");

                    b.Property<bool>("CanRemove");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50);

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("PropText")
                        .HasMaxLength(150);

                    b.Property<string>("PropType")
                        .HasMaxLength(1500);

                    b.Property<string>("PropValue");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.ToTable("DeviceProp");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Location", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasMaxLength(450);

                    b.Property<string>("District")
                        .HasMaxLength(450);

                    b.Property<bool>("Enabled");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Province")
                        .HasMaxLength(450);

                    b.Property<string>("Street")
                        .HasMaxLength(450);

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(450);

                    b.Property<int>("UseMapType");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Part", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("AlarmStatus")
                        .HasMaxLength(50);

                    b.Property<string>("BrandId");

                    b.Property<string>("CompanyId");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("Enabled");

                    b.Property<DateTime?>("InstallTime");

                    b.Property<string>("OprationId");

                    b.Property<string>("PartCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("PortNumber");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("TerminalId");

                    b.Property<double?>("Warranty");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Sensor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("AlarmStatus")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("Enabled");

                    b.Property<double?>("LowerValue");

                    b.Property<int?>("PortNumber");

                    b.Property<double?>("RealValue");

                    b.Property<string>("SensorCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TerminalId");

                    b.Property<double?>("UpperValue");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.TimedTask", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<int>("ExecAction");

                    b.Property<int>("ExecType");

                    b.Property<int>("Executed");

                    b.Property<string>("LoopMonent")
                        .HasMaxLength(500);

                    b.Property<int>("LoopType");

                    b.Property<int>("PortNumber");

                    b.Property<string>("TaskId")
                        .HasMaxLength(50);

                    b.Property<string>("TerminalId");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("TimedTasks");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<bool>("AutoCreate");

                    b.Property<string>("BrandId")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CompanyId")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<bool>("Enabled");

                    b.Property<string>("GroupKey")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMaster");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OprationId")
                        .HasMaxLength(50);

                    b.Property<int>("ProtocolType")
                        .HasMaxLength(50);

                    b.Property<string>("ProtocolVersion")
                        .HasMaxLength(50);

                    b.Property<int>("TransferType")
                        .HasMaxLength(50);

                    b.Property<double>("Warranty");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");

                    b.HasData(
                        new
                        {
                            Id = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            AutoCreate = true,
                            BrandId = "",
                            Code = "Terminal",
                            CompanyId = "",
                            Description = "",
                            Enabled = true,
                            GroupKey = "智维终端",
                            IsMaster = true,
                            Model = "1.0",
                            Name = "智维终端",
                            OprationId = "",
                            ProtocolType = 1,
                            TransferType = 1,
                            Warranty = 0.0
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeAlarm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("AlarmCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("AlarmFrom");

                    b.Property<int>("AlarmLevel");

                    b.Property<string>("AlarmName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("AlarmType");

                    b.Property<string>("AlarmedDescription");

                    b.Property<string>("AlarmingDescription");

                    b.Property<bool>("AutoSendOrder");

                    b.Property<bool>("CallAlarmedPhone");

                    b.Property<bool>("CallAlarmingPhone");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsStatistics");

                    b.Property<string>("NormalValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("RepairTime");

                    b.Property<bool>("SendAlarmedEmail");

                    b.Property<bool>("SendAlarmedMessage");

                    b.Property<bool>("SendAlarmingEmail");

                    b.Property<bool>("SendAlarmingMessage");

                    b.Property<string>("StatusMapDescription");

                    b.Property<string>("TargetCode");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceTypeAlarms");

                    b.HasData(
                        new
                        {
                            Id = "481a876f-77da-4761-9a7c-b034a509dd8c",
                            AlarmCode = "Terminal_1.0_21",
                            AlarmFrom = 0,
                            AlarmLevel = 0,
                            AlarmName = "网络通讯报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = false,
                            GroupName = "网络发生故障",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0网络故障报警解除,1发生网络故障报警",
                            TargetCode = "Terminal_1"
                        },
                        new
                        {
                            Id = "dd9800db-0752-465e-bd5a-8603953f5e5c",
                            AlarmCode = "Terminal_1.0_22",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "1号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "01号位摄像机恢复正常,11号位摄像机离线",
                            TargetCode = "Camera_1"
                        },
                        new
                        {
                            Id = "1b81269f-4f87-49f0-9067-5bdc8c658f9a",
                            AlarmCode = "Terminal_1.0_23",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "2号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "02号位摄像机恢复正常,12号位摄像机离线",
                            TargetCode = "Camera_2"
                        },
                        new
                        {
                            Id = "62e0ce0c-add6-4ffa-acc8-110ab3db073d",
                            AlarmCode = "Terminal_1.0_24",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "3号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "03号位摄像机恢复正常,13号位摄像机离线",
                            TargetCode = "Camera_3"
                        },
                        new
                        {
                            Id = "2cfb2f8b-157e-4ccb-987a-84b642e4dc12",
                            AlarmCode = "Terminal_1.0_25",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "4号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "04号位摄像机恢复正常,14号位摄像机离线",
                            TargetCode = "Camera_4"
                        },
                        new
                        {
                            Id = "9de7ff33-5bfc-4a59-9999-8cb6ecd99cfb",
                            AlarmCode = "Terminal_1.0_26",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "5号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "05号位摄像机恢复正常,15号位摄像机离线",
                            TargetCode = "Camera_5"
                        },
                        new
                        {
                            Id = "5f25559e-edb5-448a-af80-f3dd860d8c85",
                            AlarmCode = "Terminal_1.0_27",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "6号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "06号位摄像机恢复正常,16号位摄像机离线",
                            TargetCode = "Camera_6"
                        },
                        new
                        {
                            Id = "f71327d6-4968-4ece-afbe-6d097310317d",
                            AlarmCode = "Terminal_1.0_28",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "7号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "07号位摄像机恢复正常,17号位摄像机离线",
                            TargetCode = "Camera_7"
                        },
                        new
                        {
                            Id = "f71071e9-51f7-4497-9c67-44523ab43e53",
                            AlarmCode = "Terminal_1.0_29",
                            AlarmFrom = 1,
                            AlarmLevel = 0,
                            AlarmName = "8号位摄像机报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "设备离线",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "08号位摄像机恢复正常,18号位摄像机离线",
                            TargetCode = "Camera_8"
                        },
                        new
                        {
                            Id = "e8356744-1673-4c8a-b553-ffbb2a18f6e0",
                            AlarmCode = "Terminal_1.0_30",
                            AlarmFrom = 2,
                            AlarmLevel = 0,
                            AlarmName = "电压报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "过欠压警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0电压恢复正常,1电压超过上限值,2电压低于下限值,3电压值偏高,4电压值偏低",
                            TargetCode = "Sensor_1"
                        },
                        new
                        {
                            Id = "07f6fc5e-3ad8-4a82-b310-02e634d0fc7b",
                            AlarmCode = "Terminal_1.0_31",
                            AlarmFrom = 2,
                            AlarmLevel = 0,
                            AlarmName = "电流报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "电流警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0电流恢复正常,1电流超过上限值,2电流低于下限值",
                            TargetCode = "Sensor_2"
                        },
                        new
                        {
                            Id = "28471abf-7fa8-4be6-8ea1-6a22463f1067",
                            AlarmCode = "Terminal_1.0_32",
                            AlarmFrom = 2,
                            AlarmLevel = 0,
                            AlarmName = "温度报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "温度警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0温度恢复正常,1温度超过上限值,2温度低于下限值",
                            TargetCode = "Sensor_3"
                        },
                        new
                        {
                            Id = "5005e79a-6d5f-4887-8b65-218faf8eac6f",
                            AlarmCode = "Terminal_1.0_33",
                            AlarmFrom = 2,
                            AlarmLevel = 0,
                            AlarmName = "湿度报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "湿度过高警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0湿度恢复正常,1湿度超过上限值",
                            TargetCode = "Sensor_4"
                        },
                        new
                        {
                            Id = "c31aede4-e614-4fd6-a129-950d5f98b878",
                            AlarmCode = "Terminal_1.0_34",
                            AlarmFrom = 3,
                            AlarmLevel = 0,
                            AlarmName = "停电报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "市电停电警报",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0市电恢复正常,1发生停电报警",
                            TargetCode = "Part_8"
                        },
                        new
                        {
                            Id = "50d18bc3-deab-4dea-b647-259a286b6556",
                            AlarmCode = "Terminal_1.0_35",
                            AlarmFrom = 3,
                            AlarmLevel = 0,
                            AlarmName = "开门报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "布撤防警报",
                            IsStatistics = true,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0门已关闭,1门被打开",
                            TargetCode = "Part_1"
                        },
                        new
                        {
                            Id = "bcc07561-12b2-491a-b1dc-352b10344045",
                            AlarmCode = "Terminal_1.0_36",
                            AlarmFrom = 3,
                            AlarmLevel = 0,
                            AlarmName = "电源防雷器报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "防雷器警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0电源防雷器恢复正常,1电源防雷器发生警报",
                            TargetCode = "Part_2"
                        },
                        new
                        {
                            Id = "0893a733-79d6-484d-bce9-88c445871f80",
                            AlarmCode = "Terminal_1.0_37",
                            AlarmFrom = 3,
                            AlarmLevel = 0,
                            AlarmName = "网络防雷器报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "防雷器警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0网络防雷器恢复正常,1网络防雷器发生警报",
                            TargetCode = "Part_3"
                        },
                        new
                        {
                            Id = "df286864-c32e-40cc-aeba-b5a14d83310c",
                            AlarmCode = "Terminal_1.0_38",
                            AlarmFrom = 3,
                            AlarmLevel = 0,
                            AlarmName = "自复位重合闸报警状态",
                            AlarmType = 0,
                            AutoSendOrder = false,
                            CallAlarmedPhone = false,
                            CallAlarmingPhone = false,
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            GroupName = "其他类型警报",
                            IsStatistics = false,
                            NormalValue = "0,5",
                            RepairTime = 0.0,
                            SendAlarmedEmail = false,
                            SendAlarmedMessage = false,
                            SendAlarmingEmail = false,
                            SendAlarmingMessage = false,
                            StatusMapDescription = "0重合闸恢复正常,1自复位重合闸发生异常",
                            TargetCode = "Part_4"
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeChannel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<bool>("OutputThreePhase");

                    b.Property<int>("OutputType");

                    b.Property<double>("OutputValue");

                    b.Property<string>("PortDefaultName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PortNumber");

                    b.Property<int>("PortType");

                    b.Property<string>("Sort")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceTypeChannels");

                    b.HasData(
                        new
                        {
                            Id = "68fb7bfe-1641-49cd-87e9-c2e9f96d170c",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 1,
                            OutputValue = 220.0,
                            PortDefaultName = "补光端口",
                            PortNumber = 1,
                            PortType = 2,
                            Sort = "1"
                        },
                        new
                        {
                            Id = "7354f931-d8b1-4950-94aa-757641648f4d",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 1,
                            OutputValue = 220.0,
                            PortDefaultName = "视频端口",
                            PortNumber = 2,
                            PortType = 0,
                            Sort = "2"
                        },
                        new
                        {
                            Id = "a257b204-48e7-4d8e-8e71-be3a7f8925ba",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 1,
                            OutputValue = 220.0,
                            PortDefaultName = "光通端口",
                            PortNumber = 3,
                            PortType = 1,
                            Sort = "3"
                        },
                        new
                        {
                            Id = "75abdbdc-b48b-49c6-aa52-b24eb2ee6335",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 1,
                            OutputValue = 220.0,
                            PortDefaultName = "加热端口",
                            PortNumber = 4,
                            PortType = 3,
                            Sort = "4"
                        },
                        new
                        {
                            Id = "e36d6fe7-8450-4191-a51e-6728e1735ac3",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 2,
                            OutputValue = 12.0,
                            PortDefaultName = "风扇端口",
                            PortNumber = 5,
                            PortType = 4,
                            Sort = "5"
                        },
                        new
                        {
                            Id = "b9cb2624-f7d6-4667-ac81-339e660a690d",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 1,
                            OutputValue = 220.0,
                            PortDefaultName = "输出一",
                            PortNumber = 6,
                            PortType = 0,
                            Sort = "6"
                        },
                        new
                        {
                            Id = "214eaaa2-7202-460b-b277-d1776af7a4e9",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            OutputThreePhase = false,
                            OutputType = 1,
                            OutputValue = 220.0,
                            PortDefaultName = "输出二",
                            PortNumber = 7,
                            PortType = 0,
                            Sort = "7"
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeController", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Buttons");

                    b.Property<string>("ControllerCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ControllerStatus")
                        .HasMaxLength(50);

                    b.Property<int>("ControllerType");

                    b.Property<string>("Description");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<int>("PortNumber");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceTypeControllers");

                    b.HasData(
                        new
                        {
                            Id = "655fc4bd-212a-4089-9946-cd6ae7c927f3",
                            Buttons = "开,关",
                            ControllerCode = "Controller_23",
                            ControllerStatus = "0",
                            ControllerType = 0,
                            Description = "补光开关",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = "cae27080-162b-47a2-8789-b216f7b17c33",
                            Buttons = "开,关",
                            ControllerCode = "Controller_21",
                            ControllerStatus = "0",
                            ControllerType = 0,
                            Description = "视频开关",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = "01d788bc-40c0-4ae4-bfcb-e81e4ac5cec3",
                            Buttons = "开,关",
                            ControllerCode = "Controller_22",
                            ControllerStatus = "0",
                            ControllerType = 0,
                            Description = "光通开关",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = "1bd0eaf6-2460-4f10-89cc-9b3ef8d624b2",
                            Buttons = "开,关",
                            ControllerCode = "Controller_24",
                            ControllerStatus = "0",
                            ControllerType = 0,
                            Description = "加热开关",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            PortNumber = 4
                        },
                        new
                        {
                            Id = "acfdbd27-fbe8-4bc2-a461-a4cdd5972e4a",
                            Buttons = "开,关",
                            ControllerCode = "Controller_25",
                            ControllerStatus = "0",
                            ControllerType = 0,
                            Description = "风扇",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            PortNumber = 5
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeFunction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("CallbackCodes")
                        .HasMaxLength(150);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceTypeId")
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<string>("FunctionCode")
                        .HasMaxLength(100);

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("FunctionType");

                    b.Property<int>("PortNumber");

                    b.Property<string>("Setting");

                    b.Property<string>("SettingTypeName")
                        .HasMaxLength(2000);

                    b.Property<string>("Sort");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceTypeFunctions");

                    b.HasData(
                        new
                        {
                            Id = "6cce2c19-7857-4a7e-b1bb-6087c38a3c62",
                            CallbackCodes = "VedioTask,FanTask,HeatingTask,LEDTask,OpticalTask",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "task",
                            FunctionName = "定时任务",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "[{\"ChannelType\":0,\"OperateType\":1,\"ListTaskPlan\":[{\"Number\":1,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":2,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":3,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"}],\"NextExeTimeString\":null,\"NextAction\":-1,\"CurrentTimeString\":\"2019-10-28T19:06:09.+08:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":1,\"OperateType\":1,\"ListTaskPlan\":[{\"Number\":1,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":2,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":3,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"}],\"NextExeTimeString\":null,\"NextAction\":-1,\"CurrentTimeString\":\"2019-10-28T19:06:10.+08:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":2,\"OperateType\":1,\"ListTaskPlan\":[{\"Number\":1,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":2,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":3,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"}],\"NextExeTimeString\":null,\"NextAction\":-1,\"CurrentTimeString\":\"2019-10-28T19:06:10.+08:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":3,\"OperateType\":1,\"ListTaskPlan\":[{\"Number\":1,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":2,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":3,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"}],\"NextExeTimeString\":null,\"NextAction\":-1,\"CurrentTimeString\":\"2019-10-28T19:06:10.+08:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":4,\"OperateType\":1,\"ListTaskPlan\":[{\"Number\":1,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":2,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"},{\"Number\":3,\"Enable\":false,\"TaskType\":0,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\"}],\"NextExeTimeString\":null,\"NextAction\":-1,\"CurrentTimeString\":\"2019-10-28T19:06:10.+08:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}]",
                            SettingTypeName = "System.Collections.Generic.List`1[[SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.ChannelTaskPlanResultDto, SFBR.Device.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Sort = "01"
                        },
                        new
                        {
                            Id = "123c1db7-d3d8-4b6d-a236-4d943bbae14c",
                            CallbackCodes = "WdVedioAssign,RdVedioAssign",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = false,
                            FunctionCode = "mountPort",
                            FunctionName = "挂载端口",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "[{\"CameraChannel\":1,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":2,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":3,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":4,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":5,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":6,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":7,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraChannel\":8,\"VedioChannelType\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}]",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.VedioChannelAssignResultDto",
                            Sort = "02"
                        },
                        new
                        {
                            Id = "8a96a8c3-c4f7-420c-ab46-42484e543443",
                            CallbackCodes = "RdDisarmControl,RdDisarmControl",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "defending",
                            FunctionName = "撤防时间",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"Enable\":false,\"StartTime\":\"0001-01-01T00:00:00\",\"EndTime\":\"0001-01-01T00:00:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.DisarmResultDto",
                            Sort = "03"
                        },
                        new
                        {
                            Id = "c2db1494-ad27-4ce1-910f-87cd9edbfe06",
                            CallbackCodes = "RdVATHLimit,WdVATHLimit",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "threshold",
                            FunctionName = "报警阈值",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"Limit\":{\"UpperV\":0.0,\"LowerV\":0.0,\"UpperA\":0.0,\"LowerA\":0.0,\"UpperT\":0.0,\"LowerT\":0.0,\"UpperH\":0},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.VATHLimitResultDto",
                            Sort = "04"
                        },
                        new
                        {
                            Id = "adf224d1-9a29-4f10-b1d4-8e024e655cc4",
                            CallbackCodes = "RdCameraIP,WdCameraIP",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "deviceip",
                            FunctionName = "设备IP",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "[{\"CameraIP\":{\"Number\":1,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":2,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":3,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":4,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":5,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":6,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":7,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"CameraIP\":{\"Number\":8,\"IP\":\"0.0.0.0\",\"Enable\":false},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}]",
                            SettingTypeName = "System.Collections.Generic.List`1[[SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.CameraIPResultDto, SFBR.Device.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Sort = "05"
                        },
                        new
                        {
                            Id = "3f9f73d6-96b1-4afe-987f-8fc9bdc7ba00",
                            CallbackCodes = "DeviceTime",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "deviceTime",
                            FunctionName = "终端时间",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"OperateType\":0,\"Time\":null,\"TimeString\":null,\"ServerTime\":\"2019-10-28T19:06:10.0257283+08:00\",\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.DeviceTimeResultDto",
                            Sort = "06"
                        },
                        new
                        {
                            Id = "58ed7c2e-89b0-40db-b166-fa5008315e29",
                            CallbackCodes = "RdCameraFaultCheckTime,WdCameraFaultCheckTime",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "checkfrequency",
                            FunctionName = "检测时长",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"Interval\":0,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.CameraFaultCheckTimeResultDto",
                            Sort = "07"
                        },
                        new
                        {
                            Id = "48a71287-a1fe-4e0a-89b0-6ff690f4aaf5",
                            CallbackCodes = "RdChannelMode",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            FunctionCode = "model",
                            FunctionName = "工作模式",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "[{\"ChannelType\":0,\"AutoControlMode\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":1,\"AutoControlMode\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":2,\"AutoControlMode\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":3,\"AutoControlMode\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0},{\"ChannelType\":4,\"AutoControlMode\":1,\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}]",
                            SettingTypeName = "System.Collections.Generic.List`1[[SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.ChannelModeResultDto, SFBR.Device.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Sort = "08"
                        },
                        new
                        {
                            Id = "25d45c5e-8738-4d2b-bdcf-fecae2ed2d4e",
                            CallbackCodes = "RdLatitudeAndLongitude",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = false,
                            FunctionCode = "position",
                            FunctionName = "终端定位",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"LatitudeAndLongitude\":{\"Enable\":false,\"Latitude\":0.0,\"Longitude\":0.0,\"EW\":0,\"EWDegree\":null,\"EWMinute\":null,\"EWSecond\":null,\"NS\":0,\"NSDegree\":null,\"NSMinute\":null,\"NSSecond\":null},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.LatitudeAndLongitudeResultDto",
                            Sort = "09"
                        },
                        new
                        {
                            Id = "0f878c80-0caf-4aa3-aaed-a6dc54e1692e",
                            CallbackCodes = "RdDeviceInfo",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = false,
                            FunctionCode = "deviceinfo",
                            FunctionName = "终端信息",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"DeviceInfo\":{\"EnableVedioChannel\":false,\"EnableOpticalChannel\":false,\"EnableLEDChannel\":false,\"EnableHeatingChannel\":false,\"EnableFanChannel\":false,\"Enable4G\":false,\"EnableWifi\":false,\"EnableElectromagneticDoor\":false,\"EnablePowerSupplyArrester\":false,\"EnableNetworkLightningArrester\":false,\"EnableAutomaticReclosing\":false,\"GPS\":{\"Enable\":false,\"Latitude\":0.0,\"Longitude\":0.0,\"EW\":0,\"EWDegree\":null,\"EWMinute\":null,\"EWSecond\":null,\"NS\":0,\"NSDegree\":null,\"NSMinute\":null,\"NSSecond\":null}},\"UniqueId\":null,\"Success\":false,\"ErrorMessage\":null,\"CmdType\":0,\"CmdName\":null,\"ProtocolType\":0,\"TipMessage\":null,\"Data\":null,\"FromIP\":null,\"FromPort\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.Models.DeviceInfoResultDto",
                            Sort = "10"
                        },
                        new
                        {
                            Id = "847b81ca-2f89-4884-a53b-0bce5651926f",
                            CallbackCodes = "ChannelStatus",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = false,
                            FunctionCode = "onoff",
                            FunctionName = "回路开关",
                            FunctionType = 1,
                            PortNumber = 0,
                            Setting = "{\"ChannelType\":0,\"Switch\":0,\"ReStart\":0,\"AutoControl\":0}",
                            SettingTypeName = "SFBR.Device.Common.ConfigModel.SkynetTerminal.ChannelControlDto",
                            Sort = "11"
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypePart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("BrandId")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyId")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<bool>("HasStatus");

                    b.Property<string>("OprationId")
                        .HasMaxLength(50);

                    b.Property<string>("PartCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PartType");

                    b.Property<int>("PortNumber");

                    b.Property<int>("StatusIndex");

                    b.Property<double>("Warranty");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceTypeParts");

                    b.HasData(
                        new
                        {
                            Id = "74611702-c9d4-4601-b7f7-acac9a8c9f79",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_1",
                            PartName = "门磁",
                            PartType = 1,
                            PortNumber = -1,
                            StatusIndex = 26,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "a0524f9c-023b-4250-adf5-bab290f19609",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_2",
                            PartName = "电源防雷器",
                            PartType = 1,
                            PortNumber = -1,
                            StatusIndex = 27,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "1ff2fdfa-68bd-49c0-ae5b-05aa064d9701",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_3",
                            PartName = "网络防雷器",
                            PartType = 2,
                            PortNumber = -1,
                            StatusIndex = 28,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "c1cad59c-f059-428c-9aca-26b26feb8ad4",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_4",
                            PartName = "重合闸",
                            PartType = 2,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "a24dee82-e6b3-48ee-95bf-fe9fc2051b33",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_5",
                            PartName = "WIFI模块",
                            PartType = 2,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "140f8334-9caa-442f-8640-8768010d5d42",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_6",
                            PartName = "4G模块",
                            PartType = 2,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "8f47ec80-f1be-48a3-b5bb-6fa6ff4bebd3",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_7",
                            PartName = "GPS模块",
                            PartType = 2,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "2f181b8c-b505-4eea-8169-6635e5fe7f6f",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_8",
                            PartName = "市电",
                            PartType = 3,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "20d7fa01-0fc9-4845-8651-cf4f148511b7",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = false,
                            PartCode = "Part_9",
                            PartName = "自定义电源",
                            PartType = 3,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        },
                        new
                        {
                            Id = "9b6a420e-7c54-43b9-8b2c-f45952ede634",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            HasStatus = true,
                            PartCode = "Part_10",
                            PartName = "UPS",
                            PartType = 3,
                            PortNumber = -1,
                            StatusIndex = 0,
                            Warranty = 0.0
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeSensor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Enabled");

                    b.Property<double?>("LowerValue");

                    b.Property<int>("PortNumber");

                    b.Property<string>("SensorCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SensorType")
                        .HasMaxLength(50);

                    b.Property<double?>("UpperValue");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceTypeSensors");

                    b.HasData(
                        new
                        {
                            Id = "f499c2f7-0bf6-4ea0-8b04-50919ae7b346",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            LowerValue = 180.0,
                            PortNumber = -1,
                            SensorCode = "Sensor_1",
                            SensorName = "电压传感器",
                            SensorType = 1,
                            UpperValue = 260.0
                        },
                        new
                        {
                            Id = "39e6c5f9-b2bf-4686-9990-c8846181fcf8",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            LowerValue = 0.0,
                            PortNumber = -1,
                            SensorCode = "Sensor_2",
                            SensorName = "电流传感器",
                            SensorType = 2,
                            UpperValue = 0.0
                        },
                        new
                        {
                            Id = "bfe61838-b26d-468c-b95b-6c1a66c4fa91",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            LowerValue = -20.0,
                            PortNumber = -1,
                            SensorCode = "Sensor_3",
                            SensorName = "温度传感器",
                            SensorType = 3,
                            UpperValue = 65.0
                        },
                        new
                        {
                            Id = "376cbc88-b5ce-4d4d-a104-83901eea60d8",
                            DeviceTypeId = "a2cc66e6-dcf5-4326-a085-fe2a779f29e8",
                            Enabled = true,
                            PortNumber = -1,
                            SensorCode = "Sensor_4",
                            SensorName = "湿度传感器",
                            SensorType = 5,
                            UpperValue = 90.0
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.RegionAggregate.Region", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50);

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TentantId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Account")
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeveloper");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .HasMaxLength(150);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("TentantId")
                        .HasMaxLength(50);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "d70c1daf-3c9f-4fed-8b22-094760d68a8e",
                            Account = "admin",
                            IsDeveloper = true,
                            Name = "超级管理员",
                            Password = "123456",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Load", b =>
                {
                    b.HasBaseType("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device");

                    b.Property<int?>("PortNumber");

                    b.Property<string>("TerminalId");

                    b.HasIndex("TerminalId");

                    b.HasDiscriminator().HasValue("Optical");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.NetSwitch", b =>
                {
                    b.HasBaseType("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("NetSwitch");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Router", b =>
                {
                    b.HasBaseType("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("Router");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal", b =>
                {
                    b.HasBaseType("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device");

                    b.Property<string>("LocationId")
                        .HasMaxLength(50);

                    b.Property<string>("RegionId")
                        .HasMaxLength(50);

                    b.Property<int>("TerminalCode")
                        .HasMaxLength(50);

                    b.HasIndex("LocationId");

                    b.HasDiscriminator().HasValue("Terminal");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.UPS", b =>
                {
                    b.HasBaseType("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("UPS");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Camera", b =>
                {
                    b.HasBaseType("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Load");

                    b.HasDiscriminator().HasValue("Camera");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Channel", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("Channels")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Controller", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("Controllers")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DeviceAlarm", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("DeviceAlarms")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DeviceFunction", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("DevFunctions")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.DeviceProp", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Camera")
                        .WithMany("DeviceProps")
                        .HasForeignKey("CameraId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Part", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("Parts")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Sensor", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("Sensors")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.TimedTask", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("TimedTasks")
                        .HasForeignKey("TerminalId");

                    b.OwnsOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Moment", "Moment", b1 =>
                        {
                            b1.Property<string>("TimedTaskId");

                            b1.Property<int>("Day");

                            b1.Property<int>("Hour");

                            b1.Property<int>("Minute");

                            b1.Property<int>("Month");

                            b1.Property<int>("Second");

                            b1.HasKey("TimedTaskId");

                            b1.ToTable("TimedTasks");

                            b1.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.TimedTask")
                                .WithOne("Moment")
                                .HasForeignKey("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Moment", "TimedTaskId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeAlarm", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", "DeviceType")
                        .WithMany("Alarms")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeChannel", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", "DeviceType")
                        .WithMany("Channels")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeController", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", "DeviceType")
                        .WithMany("Controllers")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeFunction", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", "DeviceType")
                        .WithMany("Functions")
                        .HasForeignKey("DeviceTypeId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypePart", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", "DeviceType")
                        .WithMany("Parts")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceTypeSensor", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceTypeAggregate.DeviceType", "DeviceType")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.RegionAggregate.Region", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.RegionAggregate.Region", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Load", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal")
                        .WithMany("Loads")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.NetSwitch", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Router", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Terminal", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.UPS", b =>
                {
                    b.HasOne("SFBR.Device.Domain.AggregatesModel.DeviceAggregate.Device", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
